--- php-doc.orig.vim	2013-02-16 12:55:05.367435168 +0800
+++ php-doc.vim	2013-02-16 14:20:30.204648398 +0800
@@ -68,77 +68,145 @@
 " {{{ Globals
 
 " After phpDoc standard
-let g:pdv_cfg_CommentHead = "/**"
-let g:pdv_cfg_Comment1 = " * "
-let g:pdv_cfg_Commentn = " * "
-let g:pdv_cfg_CommentTail = " */"
-let g:pdv_cfg_CommentSingle = "//"
+if !exists('g:pdv_cfg_CommentHead')
+    let g:pdv_cfg_CommentHead = "/**"
+endif
+if !exists('g:pdv_cfg_Comment1')
+    let g:pdv_cfg_Comment1 = " * "
+endif
+if !exists('g:pdv_cfg_Commentn')
+    let g:pdv_cfg_Commentn = " * "
+endif
+if !exists('g:pdv_cfg_CommentTail')
+    let g:pdv_cfg_CommentTail = " */"
+endif
+if !exists('g:pdv_cfg_CommentSingle')
+    let g:pdv_cfg_CommentSingle = "//"
+endif
 
 " Default values
-let g:pdv_cfg_Type = "mixed"
-let g:pdv_cfg_Package = ""
-let g:pdv_cfg_Version = "$id$"
-let g:pdv_cfg_Author = "Tobias Schlitt <toby@php.net>"
-let g:pdv_cfg_Copyright = "1997-2005 The PHP Group"
-let g:pdv_cfg_License = "PHP Version 3.0 {@link http://www.php.net/license/3_0.txt}"
-
-let g:pdv_cfg_ReturnVal = "void"
+if !exists('g:pdv_cfg_Type')
+    let g:pdv_cfg_Type = "mixed"
+endif
+if !exists('g:pdv_cfg_Package')
+    let g:pdv_cfg_Package = ""
+endif
+if !exists('g:pdv_cfg_Version')
+    let g:pdv_cfg_Version = "$id$"
+endif
+if !exists('g:pdv_cfg_Author')
+    let g:pdv_cfg_Author = "Tobias Schlitt <toby@php.net>"
+endif
+if !exists('g:pdv_cfg_Copyright')
+    let g:pdv_cfg_Copyright = "1997-2005 The PHP Group"
+endif
+if !exists('g:pdv_cfg_License')
+    let g:pdv_cfg_License = "PHP Version 3.0 {@link http://www.php.net/license/3_0.txt}"
+endif
+
+if !exists('g:pdv_cfg_ReturnVal')
+    let g:pdv_cfg_ReturnVal = "void"
+endif
 
 " Wether to create @uses tags for implementation of interfaces and inheritance
-let g:pdv_cfg_Uses = 1
+if !exists('g:pdv_cfg_Uses')
+    let g:pdv_cfg_Uses = 1
+endif
 
 " Options
 " :set paste before documenting (1|0)? Recommended.
-let g:pdv_cfg_paste = 1
+if !exists('g:pdv_cfg_paste')
+    let g:pdv_cfg_paste = 1
+endif
 
 " Wether for PHP5 code PHP4 tags should be set, like @access,... (1|0)?
-let g:pdv_cfg_php4always = 1
+if !exists('g:pdv_cfg_php4always')
+    let g:pdv_cfg_php4always = 1
+endif
  
 " Wether to guess scopes after PEAR coding standards:
 " $_foo/_bar() == <private|protected> (1|0)?
-let g:pdv_cfg_php4guess = 1
+if !exists('g:pdv_cfg_php4guess')
+    let g:pdv_cfg_php4guess = 1
+endif
 
 " If you selected 1 for the last value, this scope identifier will be used for
 " the identifiers having an _ in the first place.
-let g:pdv_cfg_php4guessval = "protected"
+if !exists('g:pdv_cfg_php4guessval')
+    let g:pdv_cfg_php4guessval = "protected"
+endif
 
 "
 " Regular expressions 
 " 
 
-let g:pdv_re_comment = ' *\*/ *'
+if !exists('g:pdv_re_comment')
+    let g:pdv_re_comment = ' *\*/ *'
+endif
 
 " (private|protected|public)
-let g:pdv_re_scope = '\(private\|protected\|public\)'
+if !exists('g:pdv_re_scope')
+    let g:pdv_re_scope = '\(private\|protected\|public\)'
+endif
 " (static)
-let g:pdv_re_static = '\(static\)'
+if !exists('g:pdv_re_static')
+    let g:pdv_re_static = '\(static\)'
+endif
 " (abstract)
-let g:pdv_re_abstract = '\(abstract\)'
+if !exists('g:pdv_re_abstract')
+    let g:pdv_re_abstract = '\(abstract\)'
+endif
 " (final)
-let g:pdv_re_final = '\(final\)'
+if !exists('g:pdv_re_final')
+    let g:pdv_re_final = '\(final\)'
+endif
 
 " [:space:]*(private|protected|public|static|abstract)*[:space:]+[:identifier:]+\([:params:]\)
-let g:pdv_re_func = '^\s*\([a-zA-Z ]*\)function\s\+\([^ (]\+\)\s*(\s*\(.*\)\s*)\s*[{;]\?$'
+if !exists('g:pdv_re_func')
+    let g:pdv_re_func = '^\s*\([a-zA-Z ]*\)function\s\+\([^ (]\+\)\s*(\s*\(.*\)\s*)\s*[{;]\?$'
+endif
 " [:typehint:]*[:space:]*$[:identifier]\([:space:]*=[:space:]*[:value:]\)?
-let g:pdv_re_param = ' *\([^ &]*\) *&\?\$\([A-Za-z_][A-Za-z0-9_]*\) *=\? *\(.*\)\?$'
+if !exists('g:pdv_re_param')
+    let g:pdv_re_param = ' *\([^ &]*\) *&\?\$\([A-Za-z_][A-Za-z0-9_]*\) *=\? *\(.*\)\?$'
+endif
 
 " [:space:]*(private|protected|public\)[:space:]*$[:identifier:]+\([:space:]*=[:space:]*[:value:]+\)*;
-let g:pdv_re_attribute = '^\s*\(\(private\|public\|protected\|var\|static\)\+\)\s*\$\([^ ;=]\+\)[ =]*\(.*\);\?$'
+if !exists('g:pdv_re_attribute')
+    let g:pdv_re_attribute = '^\s*\(\(private\|public\|protected\|var\|static\)\+\)\s*\$\([^ ;=]\+\)[ =]*\(.*\);\?$'
+endif
 
 " [:spacce:]*(abstract|final|)[:space:]*(class|interface)+[:space:]+\(extends ([:identifier:])\)?[:space:]*\(implements ([:identifier:][, ]*)+\)?
-let g:pdv_re_class = '^\s*\([a-zA-Z]*\)\s*\(interface\|class\)\s*\([^ ]\+\)\s*\(extends\)\?\s*\([a-zA-Z0-9]*\)\?\s*\(implements*\)\? *\([a-zA-Z0-9_ ,]*\)\?.*$'
-
-let g:pdv_re_array  = "^array *(.*"
-let g:pdv_re_float  = '^[0-9.]\+'
-let g:pdv_re_int    = '^[0-9]\+$'
-let g:pdv_re_string = "['\"].*"
-let g:pdv_re_bool = "\(true\|false\)"
-
-let g:pdv_re_indent = '^\s*'
+if !exists('g:pdv_re_class')
+    let g:pdv_re_class = '^\s*\([a-zA-Z]*\)\s*\(interface\|class\)\s*\([^ ]\+\)\s*\(extends\)\?\s*\([a-zA-Z0-9]*\)\?\s*\(implements*\)\? *\([a-zA-Z0-9_ ,]*\)\?.*$'
+endif
+
+if !exists('g:pdv_re_array')
+    let g:pdv_re_array  = "^array *(.*"
+endif
+if !exists('g:pdv_re_float')
+    let g:pdv_re_float  = '^[0-9.]\+'
+endif
+if !exists('g:pdv_re_int')
+    let g:pdv_re_int    = '^[0-9]\+$'
+endif
+if !exists('g:pdv_re_string')
+    let g:pdv_re_string = "['\"].*"
+endif
+if !exists('g:pdv_re_bool')
+    let g:pdv_re_bool = "\(true\|false\)"
+endif
+
+if !exists('g:pdv_re_indent')
+    let g:pdv_re_indent = '^\s*'
+endif
 
 " Shortcuts for editing the text:
-let g:pdv_cfg_BOL = "norm! o"
-let g:pdv_cfg_EOL = ""
+if !exists('g:pdv_cfg_BOL')
+    let g:pdv_cfg_BOL = "norm! o"
+endif
+if !exists('g:pdv_cfg_EOL')
+    let g:pdv_cfg_EOL = ""
+endif
 
 " }}}  
 
